<launch>

  <arg name="on_hsr"/><!-- This parameter describes if giskard is running on the hsr itself -->

  <remap from="/robot_description" to="/giskard/robot_description" />

  <group if="$(eval arg('on_hsr') == true)">
    <node pkg="giskardpy" type="urdf_merger.py" name="urdf_merger" output="screen">
      <rosparam param="/urdf_merger/urdf_sources" subst_value="true">
      - source : $(find giskardpy)/test/urdfs/holonomic_base.urdf
      - source : robot_description
        link : odom_t_link
        position : [0,0,0]
        rotation : [0,0,0,1]
      </rosparam>
      <param name="robot_name" value="hsrb"/>
    </node>
  </group>

  <group if="$(eval arg('on_hsr') == false)">
      <include file="$(find hsr_description)/launch/upload_hsrb_with_fake_joints.launch">
        <arg name="description_name" value="/giskard/robot_description"/>
      </include>
  </group>

  <!--joint_trajectory_action offers an action interface for the hsrb base controller because the standard interface only offers a topic to send goals.
   The joint goal splitter uses this interface to send joint trajectories to the base controller of the hsr-->
  <!--#######################################################################-->

  <!--<include file="$(find giskardpy)/launch/giskardpy_splitter_hsr.launch"/>-->

  <node pkg="joint_trajectory_action" type="joint_trajectory_action" name="joint_trajectory_action" output="screen">
    <rosparam param="/base_trajectory_action/follow_joint_trajectory/joints">
    - odom_x 
    - odom_y
    - odom_t
    </rosparam>
    <remap from="/command" to="/hsrb/omni_base_controller/command"/>
    <remap from="/joint_trajectory_action" to="/base_trajectory_action/follow_joint_trajectory"/>
    <remap from="/state" to="/hsrb/omni_base_controller/state"/>
  </node>

  <node pkg="giskardpy" type="joint_trajectory_splitter.py" name="joint_trajectory_splitter" output="screen">
    <rosparam param="state_topics">["/hsrb/arm_trajectory_controller/state", "/hsrb/omni_base_controller/state" , "/hsrb/head_trajectory_controller/state"]</rosparam>
    <rosparam param="client_topics">["/hsrb/arm_trajectory_controller/follow_joint_trajectory", "/hsrb/omni_base_controller/follow_joint_trajectory", "/hsrb/head_trajectory_controller/follow_joint_trajectory"]</rosparam>
  </node>

  <!--#######################################################################-->

  <!--node that uses the odometry of the hsr to calculate and publish joint states for the fake joints of the base-->
  <!--#######################################################################-->
  <node pkg="giskardpy" type="hsr_base_joint_state_publisher.py" name="hsr_base_joint_state_publisher" output="screen"/>
  <!--#######################################################################-->


  <!--launch node that combines base joint states and body joint states on the /joint_state topic-->
  <!--#######################################################################-->
  <node pkg="joint_state_publisher" type="joint_state_publisher" name="giskard_joint_state_publisher" output="screen" >
    <rosparam param="source_list">
    - /hsrb/joint_states
    - /hsrb_base/joint_states
    </rosparam>
    <rosparam param="zeros">
    'odom_x': 0.0
    'odom_y': 0.0
    'odom_z': 0.0
    </rosparam>
    <param name="rate" value="120"/>
    <param name="use_gui" value="False"/>
  </node>

  <!--There might be 2 robot state publishers. If this node is not started, it will sometimes not find the gripper_tool_frame in a lookup.-->
  <node pkg="robot_state_publisher" type="robot_state_publisher"
      name="giskard_robot_state_publisher" output="screen">
      <param name="publish_frequency" value="10"/>
      <remap from="robot_description" to="giskard/robot_description" />
  </node>
<!--#######################################################################-->

</launch>
