name: CI unit tests
defaults:
  run:
    shell: bash -ieo pipefail {0}
on:
  push:
    branches:
      - master
      - devel
  pull_request:
#    branches:
#      - master
#      - devel
  workflow_dispatch:
    inputs:
      logLevel:
        description: 'Log level'
        required: true
        default: 'info'
        type: choice
        options:
        - info
        - warning
        - debug
      tags:
        description: 'Test scenario tags'
        required: false
        type: boolean

jobs:
  docker:
    name: Docker Check and Build
    runs-on: ubuntu-latest

    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Check for Dockerfile changes
        id: check_changes
        run: |
          DOCKERFILE_CHANGED=false

          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            # For manual triggers, always build Docker images
            echo "Manual workflow trigger, will build Docker images"
            DOCKERFILE_CHANGED=false

          elif [[ "${{ github.event_name }}" == "pull_request" ]]; then
            # For PRs, check if any Dockerfiles changed in the PR
            echo "Checking for Dockerfile changes in PR"
          
            # Fetch the PR head for PRs from forks
            git fetch origin pull/${{ github.event.pull_request.number }}/head:pr-${{ github.event.pull_request.number }}
            
            # Compare base to PR head
            if git diff --name-only origin/${{ github.event.pull_request.base.ref }} pr-${{ github.event.pull_request.number }} | grep -q "Dockerfile"; then
              echo "Dockerfile changes detected in PR"
              DOCKERFILE_CHANGED=true
            fi

          elif [[ "${{ github.event_name }}" == "push" ]]; then
            # For pushes, check if any Dockerfiles changed in the push
            echo "Checking for Dockerfile changes in push"
            if git diff --name-only ${{ github.event.before }} ${{ github.event.after }} | grep -q "Dockerfile"; then
              echo "Dockerfile changes detected in push"
              DOCKERFILE_CHANGED=true
            fi
          fi

          echo "changed=${DOCKERFILE_CHANGED}" >> $GITHUB_OUTPUT
          echo "Dockerfile changed: ${DOCKERFILE_CHANGED}"

      - name: Set up Docker Buildx
        if: steps.check_changes.outputs.changed == 'true'
        uses: docker/setup-buildx-action@v3

      # ghcr.io link needs to be lowercase, as such the following echo to $GITHUB_ENV
      - name: create Image Name
        if: steps.check_changes.outputs.changed == 'true'
        run: |
          echo "IMAGE_NAME=ghcr.io/${OWNER,,}/$(echo ${{ github.repository }} | cut -d'/' -f2)" >> $GITHUB_ENV
        env:
          OWNER: '${{ github.repository_owner }}'

      # Setup Download-URL for requirements.txt for python dependencies
      - name: Set Download URL
        if: steps.check_changes.outputs.changed == 'true'
        run: |
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            # For PR events, use the specific SHA of the HEAD commit in the PR
            echo "DOWNLOAD_URL=https://raw.githubusercontent.com/${{ github.repository }}/${{ github.event.pull_request.head.sha }}/requirements.txt" >> $GITHUB_ENV
          else
            # For push events, use the branch/tag name
            echo "DOWNLOAD_URL=https://raw.githubusercontent.com/${{ github.repository }}/${{ github.ref_name }}/requirements.txt" >> $GITHUB_ENV
          fi

      - name: Login to GitHub Container Registry
        if: steps.check_changes.outputs.changed == 'true'
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Builds docker images and uploads them to the GitHub Container Registry
      - name: Find Dockerfiles and Build Images
        if: steps.check_changes.outputs.changed == 'true'
        run: |
          for dockerfilepath in $(find . -name 'Dockerfile' | rev | cut -d'/' -f2- | rev); do
            UBUNTU_VERSION=$(grep -oP '(?<=FROM ubuntu:)[0-9]+(\.[0-9]+)?' "$dockerfilepath"/Dockerfile)

            if [ -z "$UBUNTU_VERSION" ]; then
              echo "No Ubuntu version found in $dockerfile, skipping..."
              continue
            fi

            docker buildx build \
              --platform linux/amd64 \
              --build-arg DOWNLOAD_URL=${DOWNLOAD_URL} \
              -t ${IMAGE_NAME}:${UBUNTU_VERSION} \
              --push \
              $dockerfilepath

          done
  # GitHub Repository-Owners can have uppercase letters.
  # Container Registry URLs need to be lowercase.
  # There is no easy way to get it to lowercase (that i found)
  to-lowercase:
    needs: docker
    runs-on: ubuntu-latest
    outputs:
      repo_lowercase: ${{ steps.lowercase.outputs.repository }}
    steps:
      - id: lowercase
        run: |
          echo "repository=${GITHUB_REPOSITORY@L}" >> $GITHUB_OUTPUT
  test:
    needs: to-lowercase
    strategy:
      # Lets all tests finish, even if one test fails
      fail-fast: false
      matrix:
        tests: [ "test_cas_wrapper", "test_symbol_manager", "test_math", "test_giskard_library"]
        ubuntu_version: [ "20.04", "24.04"]
        qp_solver: [ qpSWIFT ]
    runs-on: ubuntu-latest
    container: # Login and start specified container image. Ubuntu20.04 isn't supported on GitHub-Workflow as of 04.2025
      image: ghcr.io/${{ needs.to-lowercase.outputs.repo_lowercase }}:${{ matrix.ubuntu_version }}
      credentials:
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    env:
      QP_SOLVER: ${{ matrix.qp_solver }}
      HOME: /root/
    steps:
      - name: Checkout main repo
        uses: actions/checkout@v4
        with:
          path: 'giskardpy'
      - name: move pr2.urdf to temp folder from root folder
        run: mv /root/pr2.urdf /__w/giskardpy/giskardpy/giskardpy/test/urdfs/pr2.urdf
      - name: test
        run: |
          cd giskardpy/test
          python3 -m pytest -s ${{ matrix.tests }}.py
  #    - name: Setup upterm session
  ##      if: always()
  #      if: failure()
  #      uses: lhotari/action-upterm@v1
