name: Publish Dockerfiles
defaults:
  run:
    shell: bash -ieo pipefail {0}
on:
  workflow_call:

jobs:
  docker:
    name: Docker Check and Build
    runs-on: ubuntu-latest

    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

        # ghcr.io link needs to be lowercase, as such the following echo to $GITHUB_ENV
      - name: create Image Name
        run: |
          echo "IMAGE_NAME=ghcr.io/${OWNER,,}/$(echo ${{ github.repository }} | cut -d'/' -f2)" >> $GITHUB_ENV
        env:
          OWNER: '${{ github.repository_owner }}'

      - name: Inspect Docker image manifest and check dependencies
        id: check_repos
        run: |
          BPB_CHANGED=false
          QPSWIFT_CHANGED=false

          for dockerfilepath in $(find . -name 'Dockerfile' | rev | cut -d'/' -f2- | rev); do
            UBUNTU_VERSION=$(grep -oP '(?<=FROM ubuntu:)[0-9]+(\.[0-9]+)?' "$dockerfilepath"/Dockerfile)

            # Extract specific labels if needed
            QPSWIFT_DOCKER=$(docker manifest inspect -v ${IMAGE_NAME}:${UBUNTU_VERSION} | jq -r '.[0].OCIManifest.annotations.QPSWIFT // empty')
            BPB_DOCKER=$(docker manifest inspect -v ${IMAGE_NAME}:${UBUNTU_VERSION} | jq -r '.[0].OCIManifest.annotations.BPB // empty')

            # Get the latest commit SHA for QPSWIFT
            LATEST_SHA_QPSWIFT=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
              https://api.github.com/repos/SemRoCo/qpswift/commits/main | jq -r '.sha')

            # Compare and set output
            if [ "$LATEST_SHA_QPSWIFT" != "$QPSWIFT_DOCKER" ]; then
              QPSWIFT_CHANGED=true
              echo "QPSwift in ${IMAGE_NAME}:${UBUNTU_VERSION} has changed: $LATEST_SHA_QPSWIFT from: $QPSWIFT_DOCKER"
            fi

            # Get the latest commit SHA for BPB
            LATEST_SHA_BPB=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
              https://api.github.com/repos/SemRoCo/bullet3/commits/master | jq -r '.sha')

            # Compare and set output
            if [ "$LATEST_SHA_BPB" != "$BPB_DOCKER" ]; then
              BPB_CHANGED=true
              echo "BetterPyBullet in ${IMAGE_NAME}:${UBUNTU_VERSION} has changed: $LATEST_SHA_BPB from: $BPB_DOCKER"
            fi
          done

          if [[ "$BPB_CHANGED" == "true" || "$BPB_CHANGED" == "true" ]]; then
            echo "NEEDS_REBUILD=true" >> $GITHUB_OUTPUT
            echo "Rebuild needed due to changes in dependencies"
          else
            echo "NEEDS_REBUILD=false" >> $GITHUB_OUTPUT
            echo "No changes detected in dependencies"
          fi

      - name: Check for Dockerfile changes
        id: check_changes
        run: |
          DOCKERFILE_CHANGED=false

          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            # For manual triggers, never build Docker images
            echo "Manual workflow trigger, will not build Docker images"
            DOCKERFILE_CHANGED=false

          elif [[ "${{ github.event_name }}" == "pull_request" ]]; then
            # For PRs, check if any Dockerfiles changed in the PR
            echo "Checking for Dockerfile changes in PR"
            
            # Fetch the PR head for PRs from forks
            git fetch origin pull/${{ github.event.pull_request.number }}/head:pr-${{ github.event.pull_request.number }}
            
            # Compare base to PR head
            if git diff --name-only origin/${{ github.event.pull_request.base.ref }} pr-${{ github.event.pull_request.number }} | grep -q "Dockerfile"; then
              echo "Dockerfile changes detected in PR"
              DOCKERFILE_CHANGED=true
            fi

          elif [[ "${{ github.event_name }}" == "push" ]]; then
            # For pushes, check if any Dockerfiles changed in the push
            echo "Checking for Dockerfile changes in push"
            if git diff --name-only HEAD^ HEAD | grep -q "Dockerfile"; then
              echo "Dockerfile changes detected in push"
              DOCKERFILE_CHANGED=true
            fi
          fi

          echo "changed=${DOCKERFILE_CHANGED}" >> $GITHUB_OUTPUT
          echo "Dockerfile changed: ${DOCKERFILE_CHANGED}"

      - name: Set up Docker Buildx
        if: steps.check_changes.outputs.changed == 'true' || steps.check_repos.outputs.NEEDS_REBUILD == 'true'
        uses: docker/setup-buildx-action@v3

      # Setup Download-URL for requirements.txt for python dependencies
      - name: Set Download URL
        if: steps.check_changes.outputs.changed == 'true' || steps.check_repos.outputs.NEEDS_REBUILD == 'true'
        run: |
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            # For PR events, use the specific SHA of the HEAD commit in the PR
            echo "DOWNLOAD_URL=https://raw.githubusercontent.com/${{ github.repository }}/${{ github.event.pull_request.head.sha }}/requirements.txt" >> $GITHUB_ENV
          else
            # For push events, use the branch/tag name
            echo "DOWNLOAD_URL=https://raw.githubusercontent.com/${{ github.repository }}/${{ github.ref_name }}/requirements.txt" >> $GITHUB_ENV
          fi

      # Builds docker images and uploads them to the GitHub Container Registry
      - name: Find Dockerfiles and Build Images
        if: steps.check_changes.outputs.changed == 'true' || steps.check_repos.outputs.NEEDS_REBUILD == 'true'
        run: |
          # Get Commit Hash for Dependencies
          SHA_QPSWIFT=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            https://api.github.com/repos/SemRoCo/qpswift/commits/main | jq -r '.sha')
          SHA_BPB=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            https://api.github.com/repos/SemRoCo/bullet3/commits/master | jq -r '.sha')

          for dockerfilepath in $(find . -name 'Dockerfile' | rev | cut -d'/' -f2- | rev); do
            UBUNTU_VERSION=$(grep -oP '(?<=FROM ubuntu:)[0-9]+(\.[0-9]+)?' "$dockerfilepath"/Dockerfile)

            if [ -z "$UBUNTU_VERSION" ]; then
              echo "No Ubuntu version found in $dockerfile, skipping..."
              continue
            fi

            docker buildx build \
              --platform linux/amd64 \
              --build-arg DOWNLOAD_URL=${DOWNLOAD_URL} \
              --annotation "manifest:QPSWIFT=${SHA_QPSWIFT}" \
              --annotation "manifest:BPB=${SHA_BPB}" \
              -t ${IMAGE_NAME}:${UBUNTU_VERSION} \
              --push \
              $dockerfilepath

          done