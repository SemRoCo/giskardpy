name: Reusable Robot CI
defaults:
  run:
    shell: bash -ieo pipefail {0}
on:
  workflow_call:
    inputs:
      robot:
        description: one of [pr2, hsr, tiago, donbot]
        required: true
        type: string
      test1:
        description: that that will be run, e.g. test/test_integration_hsr.py::TestJointGoals
        required: true
        type: string
      test2:
        required: false
        type: string
      test3:
        required: false
        type: string
      test4:
        required: false
        type: string
      test5:
        required: false
        type: string
      test6:
        required: false
        type: string
      test7:
        required: false
        type: string
      test8:
        required: false
        type: string
      test9:
        required: false
        type: string
      test10:
        required: false
        type: string
jobs:
  test_standalone:
    runs-on: ubuntu-latest
    container: # Login and start specified container image. Ubuntu20.04 isn't supported on GitHub-Workflow as of 04.2025
      image: ghcr.io/${{ needs.to-lowercase.outputs.repo_lowercase }}:20.04
      credentials:
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    strategy:
      matrix:
        qp_solver: [ qpSWIFT ]
    env:
      QP_SOLVER: ${{ matrix.qp_solver }}
    steps:
      - uses: actions/checkout@v3
        with:
          path: 'ros_ws/src/giskardpy_ros'
          repository: SemRoCo/giskardpy_ros
      - name: Find Corresponding PR in giskardpy
        # searches for pull-request in giskardpy matich the pull-request that triggered the workflow.
        # Uses the pr-url, pr-number or pr-title to search the open pr's on giskardpy to find a description,
        # which contains one of them.
        if: github.event_name == 'pull_request'
        id: find_pr
        run: |
          REPO="${{ github.repository_owner }}/giskardpy"
          PR_NUMBER="${{ github.event.pull_request.number }}"
          PR_TITLE="${{ github.event.pull_request.title }}"
          PR_URL="${{ github.event.pull_request.url }}"

          echo "Searching for PR related to #$PR_NUMBER in $REPO"

          # Find PR by matching title or linked issues
          PR_JSON=$(gh pr list --repo "$REPO" --state open \
            --json number,title,body,baseRefName,url,mergeable,headRefName,headRepository,headRepositoryOwner | jq -r \
            ".[] | select(.body | contains(\"#$PR_NUMBER\") or contains(\"${PR_TITLE}\") or contains(\"${PR_URL}\")) | @base64")

          if [[ -n "$PR_JSON" ]]; then
            PR_INFO=$(echo "$PR_JSON" | base64 --decode)
            PR_URL=$(echo "$PR_INFO" | jq -r '.url')
            PR_INTO_BRANCH=$(echo "$PR_INFO" | jq -r '.baseRefName')
            PR_FROM_BRANCH=$(echo "$PR_INFO" | jq -r '.headRefName')
            PR_FROM_REPO=$(echo "$PR_INFO" | jq -r '.headRepository.name')
            PR_FROM_OWNER=$(echo "$PR_INFO" | jq -r '.headRepositoryOwner.login')
            PR_MERGEABLE=$(echo "$PR_INFO" | jq -r '.mergeable')

            echo "Found related PR in second repo: $PR_URL (Branch: $PR_BRANCH)"
            echo "pr_found=true" >> $GITHUB_ENV
            echo "pr_into_branch=$PR_INTO_BRANCH" >> $GITHUB_ENV
            echo "pr_from_branch=$PR_FROM_BRANCH" >> $GITHUB_ENV
            echo "pr_from_repo=$PR_FROM_REPO" >> $GITHUB_ENV
            echo "pr_from_owner=$PR_FROM_OWNER" >> $GITHUB_ENV
            echo "pr_mergeable=$PR_MERGEABLE" >> $GITHUB_ENV
          else
            echo "No matching PR found in second repo."
            echo "pr_found=false" >> $GITHUB_ENV
          fi
        env:
          GH_TOKEN: ${{ github.token }}
      - name: Checkout giskardpy PR Branch
        # when a matching pr is found and merge-able, clone the repo and merge the branches of the pr.
        if: github.event_name == 'pull_request' && env.pr_found == 'true' && env.pr_mergeable == 'MERGEABLE'
        run: |
          git config --global user.email "github-actions@github.com"
          git config --global user.name "GitHub Actions"
          
          git clone https://github.com/${{ github.repository_owner }}/giskardpy.git
          cd giskardpy
          git checkout ${{ env.pr_into_branch }}
          
          git pull origin ${{ env.pr_into_branch }}

          echo "Adding remote fork: ${{ env.pr_from_owner }}/${{ env.pr_from_repo }}"
          git remote add from_repo https://github.com/${{ env.pr_from_owner }}/${{ env.pr_from_repo }}.git
          git fetch from_repo

          echo "Merging PR branch (${{ env.pr_from_branch }}) into ${{ env.pr_into_branch }}"
          git checkout ${{ env.pr_into_branch }}
          git merge --no-commit --no-ff from_repo/${{ env.pr_from_branch }}
      - uses: actions/checkout@v3
        if: github.event_name == 'push' || env.pr_found == 'false' || env.pr_mergeable != 'MERGEABLE'
        # fallback repo and branch, if event is push or no merge-able pr is found
        with:
          path: 'giskardpy'
          repository: ${{ github.repository_owner }}/giskardpy
          ref: giskard_library
      - name: install pip dependencies
        run: |
          python3 -m pip install --upgrade pip
          pip3 install -r ros_ws/src/giskardpy_ros/requirements.txt
          pip3 install -r giskardpy/requirements.txt
          cd giskardpy
          pip3 install -e .
      - name: Checkout giskard msgs
        uses: actions/checkout@v3
        with:
          path: 'ros_ws/src/giskard_msgs'
          repository: SemRoCo/giskard_msgs
          ref: giskard_library
      - name: Checkout iai_maps
        uses: actions/checkout@v3
        with:
          path: 'ros_ws/src/iai_maps'
          repository: code-iai/iai_maps
          ref: master
      # install robots -------------------------------------------------------------------------------------------------
      - if: ${{ inputs.robot == 'hsr' }}
        name: Checkout hsr_description
        uses: actions/checkout@v3
        with:
          path: 'ros_ws/src/hsr_description'
          repository: code-iai/hsr_description
          ref: master
      - if: ${{ inputs.robot == 'hsr' }}
        name: Checkout hsr_meshes
        uses: actions/checkout@v3
        with:
          path: 'ros_ws/src/hsr_meshes'
          repository: ToyotaResearchInstitute/hsr_meshes
          ref: master
      - if: ${{ inputs.robot == 'donbot' }}
        name: Checkout iai_robots
        uses: actions/checkout@v3
        with:
          path: 'ros_ws/src/iai_robots'
          repository: code-iai/iai_robots
          ref: master
      - if: ${{ inputs.robot == 'donbot' }}
        name: Checkout iai_robot_peripherals
        uses: actions/checkout@v3
        with:
          path: 'ros_ws/src/iai_robot_peripherals'
          repository: code-iai/iai_robot_peripherals
          ref: main
      - if: ${{ inputs.robot == 'pr2' }}
        name: Checkout iai_pr2
        uses: actions/checkout@v3
        with:
          path: 'ros_ws/src/iai_pr2'
          repository: code-iai/iai_pr2
          ref: mujoco_sim_setup
      - if: ${{ inputs.robot == 'pr2' }}
        name: ignore some packages in iai_pr2
        run: |
          cd ros_ws
          touch src/iai_pr2/iai_pr2_sim/CATKIN_IGNORE
          touch src/iai_pr2/iai_pr2_donbot/CATKIN_IGNORE
      # build workspace ------------------------------------------------------------------------------------------------
      - name: install ros and rosdeps
        uses: betwo/github-setup-catkin@master
        env:
          ACTIONS_ALLOW_UNSECURE_COMMANDS: true
        with:
          ros-version: noetic
          build-tool: 'catkin_tools'
          workspace: $GITHUB_WORKSPACE/ros_ws
      - if: ${{ inputs.robot == 'tiago' }} # tiago has to be pulled now because it has fucked up package.xml
        name: Checkout iai_tiago
        uses: actions/checkout@v3
        with:
          path: 'ros_ws/src/iai_tiago'
          repository: code-iai/iai_tiago
          ref: main
          submodules: recursive
      - name: build Giskard
        run: |
          cd ros_ws
          . /opt/ros/noetic/setup.bash
          catkin build
          echo 'export ROS_HOSTNAME=localhost' >> ~/.bashrc
          echo 'source $GITHUB_WORKSPACE/ros_ws/devel/setup.bash' >> ~/.bashrc
      #tests ===========================================================================================================
      - name: start roscore
        run: roscore &
      - if: ${{ (always()) && (runner.debug == '1') }}
        name: Setup upterm session
        uses: lhotari/action-upterm@v1
      - name: run ${{ inputs.test1 }}
        run: |
          roscd giskardpy_ros/test
          python3 -m pytest -s ${{ inputs.test1 }}
      - if: ${{ inputs.test2 != '' }}
        name: run ${{ inputs.test2 }}
        run: |
          roscd giskardpy_ros/test
          python3 -m pytest -s ${{ inputs.test2 }}
      - if: ${{ inputs.test3 != '' }}
        name: run ${{ inputs.test3 }}
        run: |
          roscd giskardpy_ros/test
          python3 -m pytest -s ${{ inputs.test3 }}
      - if: ${{ inputs.test4 != '' }}
        name: run ${{ inputs.test4 }}
        run: |
          roscd giskardpy_ros/test
          python3 -m pytest -s ${{ inputs.test4 }}
      - if: ${{ inputs.test5 != '' }}
        name: run ${{ inputs.test5 }}
        run: |
          roscd giskardpy_ros/test
          python3 -m pytest -s ${{ inputs.test5 }}
      - if: ${{ inputs.test6 != '' }}
        name: run ${{ inputs.test6 }}
        run: |
          roscd giskardpy_ros/test
          python3 -m pytest -s ${{ inputs.test6 }}
      - if: ${{ inputs.test7 != '' }}
        name: run ${{ inputs.test7 }}
        run: |
          roscd giskardpy_ros/test
          python3 -m pytest -s ${{ inputs.test7 }}
      - if: ${{ inputs.test8 != '' }}
        name: run ${{ inputs.test8 }}
        run: |
          roscd giskardpy_ros/test
          python3 -m pytest -s ${{ inputs.test8 }}
      - if: ${{ inputs.test9 != '' }}
        name: run ${{ inputs.test9 }}
        run: |
          roscd giskardpy_ros/test
          python3 -m pytest -s ${{ inputs.test9 }}
      - if: ${{ inputs.test10 != '' }}
        name: run ${{ inputs.test10 }}
        run: |
          roscd giskardpy_ros/test
          python3 -m pytest -s ${{ inputs.test10 }}
